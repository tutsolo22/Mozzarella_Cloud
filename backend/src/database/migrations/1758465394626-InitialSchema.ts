import { MigrationInterface, QueryRunner } from "typeorm";

export class InitialSchema1758465394626 implements MigrationInterface {
    name = 'InitialSchema1758465394626'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "permissions" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "action" character varying NOT NULL, "subject" character varying NOT NULL, "conditions" jsonb, CONSTRAINT "PK_920331560282b8bd21bb02290df" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_c9cd48649b85cbed355d3e113f" ON "permissions" ("action", "subject") `);
        await queryRunner.query(`CREATE TYPE "public"."roles_name_enum" AS ENUM('super_admin', 'admin', 'manager', 'kitchen', 'delivery', 'cashier', 'electronic_cashier', 'customer')`);
        await queryRunner.query(`CREATE TABLE "roles" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "name" "public"."roles_name_enum" NOT NULL, CONSTRAINT "UQ_648e3f5447f725579d7d4ffdfb7" UNIQUE ("name"), CONSTRAINT "PK_c1433d71a4838793a49dcad46ab" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TYPE "public"."licenses_status_enum" AS ENUM('active', 'expired', 'revoked')`);
        await queryRunner.query(`CREATE TABLE "licenses" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "key" text NOT NULL, "userLimit" integer NOT NULL, "branchLimit" integer NOT NULL, "expiresAt" TIMESTAMP NOT NULL, "status" "public"."licenses_status_enum" NOT NULL DEFAULT 'active', "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "tenantId" uuid, CONSTRAINT "UQ_a7710ce61d5fabdce13c1b9e1fd" UNIQUE ("key"), CONSTRAINT "REL_36bf362e91d307965d9a114d64" UNIQUE ("tenantId"), CONSTRAINT "PK_da5021501ce80efa03de6f40086" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "tenant_configurations" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "tenantId" uuid NOT NULL, "slogan" character varying(255), "contactPhone" character varying(50), "fiscalAddress" text, "logoUrl" character varying(512), "logoDarkUrl" character varying(512), "faviconUrl" character varying(512), "rfc" character varying(13), "businessName" character varying(255), "taxRegime" character varying(100), "facebookUrl" character varying(255), "instagramUrl" character varying(255), "tiktokUrl" character varying(255), "primaryPrinterIp" character varying(45), "secondaryPrinterIp" character varying(45), "kdsNotificationSoundUrl" character varying(512), "restaurantLatitude" double precision, "restaurantLongitude" double precision, "directionsApiKey" character varying(255), "openCageApiKey" character varying(255), "mercadoPagoAccessToken" character varying(255), "enabledPaymentMethods" text, "deliveryArea" geography(Polygon,4326), "invoicingAppUrl" character varying(512), CONSTRAINT "REL_03485c758a380c96574bb38088" UNIQUE ("tenantId"), CONSTRAINT "PK_5b97b6bdabfab3eb07552b3bbed" PRIMARY KEY ("id")); COMMENT ON COLUMN "tenant_configurations"."directionsApiKey" IS 'API Key for route optimization services'; COMMENT ON COLUMN "tenant_configurations"."openCageApiKey" IS 'API Key for geocoding services'; COMMENT ON COLUMN "tenant_configurations"."mercadoPagoAccessToken" IS 'Access Token for Mercado Pago'; COMMENT ON COLUMN "tenant_configurations"."enabledPaymentMethods" IS 'List of enabled payment methods'; COMMENT ON COLUMN "tenant_configurations"."deliveryArea" IS 'Área de entrega a nivel de tenant (fallback)'; COMMENT ON COLUMN "tenant_configurations"."invoicingAppUrl" IS 'URL de la aplicación de facturación para que el usuario acceda.'`);
        await queryRunner.query(`CREATE TABLE "product_categories" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "name" character varying NOT NULL, "position" integer NOT NULL DEFAULT '0', "tenantId" character varying NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_7069dac60d88408eca56fdc9e0c" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "preparation_zones" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "name" character varying NOT NULL, "tenantId" uuid NOT NULL, "locationId" uuid NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_cc38415d1dbbbf740fcfdba88e5" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "IDX_c3182821195a23e5aa8015e67c" ON "preparation_zones" ("tenantId", "locationId") `);
        await queryRunner.query(`CREATE TABLE "recipe_items" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "productId" uuid NOT NULL, "ingredientId" uuid NOT NULL, "quantityRequired" numeric(10,3) NOT NULL, CONSTRAINT "PK_daec78e42198e9c42e1fed60eec" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_582e929f1e678a9ad24eb06846" ON "recipe_items" ("productId", "ingredientId") `);
        await queryRunner.query(`CREATE TABLE "ingredients" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "name" character varying NOT NULL, "stockQuantity" numeric(10,3) NOT NULL DEFAULT '0', "unit" character varying NOT NULL, "lowStockThreshold" numeric(10,3) NOT NULL DEFAULT '0', "costPerUnit" numeric(10,2) NOT NULL DEFAULT '0', "tenantId" uuid NOT NULL, "locationId" uuid NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP, CONSTRAINT "PK_9240185c8a5507251c9f15e0649" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_ef72506f7c6ff6122ca11c51b1" ON "ingredients" ("tenantId", "locationId", "name") WHERE "deletedAt" IS NULL`);
        await queryRunner.query(`CREATE TABLE "product_ingredients" ("productId" uuid NOT NULL, "ingredientId" uuid NOT NULL, "quantityRequired" numeric(10,3) NOT NULL, CONSTRAINT "PK_48e5271492b738d87ca91625294" PRIMARY KEY ("productId", "ingredientId"))`);
        await queryRunner.query(`CREATE TABLE "products" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "name" character varying NOT NULL, "description" text, "price" numeric(10,2) NOT NULL, "imageUrl" character varying, "isAvailable" boolean NOT NULL DEFAULT true, "recipeIsSet" boolean NOT NULL DEFAULT false, "weightKg" numeric(10,3) NOT NULL DEFAULT '0', "volumeM3" numeric(10,6) NOT NULL DEFAULT '0', "tenantId" uuid NOT NULL, "locationId" uuid NOT NULL, "categoryId" uuid, "preparationZoneId" uuid, "satProductKey" character varying(10), "satUnitKey" character varying(5), "isTaxable" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP, CONSTRAINT "PK_0806c755e0aca124e67c0cf6d7d" PRIMARY KEY ("id")); COMMENT ON COLUMN "products"."satProductKey" IS 'Clave de Producto o Servicio del catálogo del SAT'; COMMENT ON COLUMN "products"."satUnitKey" IS 'Clave de Unidad de Medida del catálogo del SAT'; COMMENT ON COLUMN "products"."isTaxable" IS 'Indica si el producto causa impuestos (IVA)'`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_4822f9c3a916a1d534d45b95c9" ON "products" ("tenantId", "locationId", "name") WHERE "deletedAt" IS NULL`);
        await queryRunner.query(`CREATE TABLE "order_items" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "orderId" uuid NOT NULL, "productId" uuid NOT NULL, "quantity" integer NOT NULL, "unitPrice" numeric(10,2) NOT NULL, "notes" text, CONSTRAINT "PK_005269d8574e6fac0493715c308" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "customers" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "tenantId" uuid NOT NULL, "fullName" character varying NOT NULL, "phoneNumber" character varying NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_133ec679a801fab5e070f73d3ea" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_862ed2c5203e872dcc18da0989" ON "customers" ("tenantId", "phoneNumber") `);
        await queryRunner.query(`CREATE TYPE "public"."orders_channel_enum" AS ENUM('in_store', 'phone', 'whatsapp', 'web')`);
        await queryRunner.query(`CREATE TYPE "public"."orders_status_enum" AS ENUM('pending_confirmation', 'confirmed', 'in_preparation', 'ready_for_delivery', 'ready_for_external_pickup', 'in_delivery', 'delivered', 'cancelled', 'pending_payment')`);
        await queryRunner.query(`CREATE TYPE "public"."orders_ordertype_enum" AS ENUM('delivery', 'pickup', 'dine_in')`);
        await queryRunner.query(`CREATE TYPE "public"."orders_paymentmethod_enum" AS ENUM('cash', 'transfer', 'debit_card', 'credit_card', 'mercado_pago')`);
        await queryRunner.query(`CREATE TYPE "public"."orders_paymentstatus_enum" AS ENUM('pending', 'paid', 'failed', 'refunded')`);
        await queryRunner.query(`CREATE TYPE "public"."orders_deliveryprovider_enum" AS ENUM('in_house', 'external')`);
        await queryRunner.query(`CREATE TABLE "orders" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "shortId" character varying(9) NOT NULL, "tenantId" uuid NOT NULL, "locationId" uuid NOT NULL, "customerId" uuid, "channel" "public"."orders_channel_enum" NOT NULL DEFAULT 'in_store', "assignedDriverId" uuid, "status" "public"."orders_status_enum" NOT NULL DEFAULT 'pending_confirmation', "orderType" "public"."orders_ordertype_enum" NOT NULL DEFAULT 'delivery', "totalAmount" numeric(10,2) NOT NULL, "totalWeightKg" numeric(10,3) NOT NULL DEFAULT '0', "totalVolumeM3" numeric(10,6) NOT NULL DEFAULT '0', "deliveryAddress" character varying(500), "latitude" double precision, "longitude" double precision, "paymentMethod" "public"."orders_paymentmethod_enum" NOT NULL DEFAULT 'cash', "paymentStatus" "public"."orders_paymentstatus_enum" NOT NULL DEFAULT 'pending', "paymentGatewayId" character varying(255), "paymentLink" character varying(512), "preparationTimeMinutes" integer, "estimatedDeliveryAt" TIMESTAMP WITH TIME ZONE, "assignedAt" TIMESTAMP WITH TIME ZONE, "deliveredAt" TIMESTAMP WITH TIME ZONE, "deliverySequence" integer, "notes" text, "pickupNotificationSent" boolean NOT NULL DEFAULT false, "estimatedPickupArrivalAt" TIMESTAMP WITH TIME ZONE, "isPriority" boolean NOT NULL DEFAULT false, "deliveryProvider" "public"."orders_deliveryprovider_enum" NOT NULL DEFAULT 'in_house', "externalDeliveryProvider" character varying(100), "deliveryFee" numeric(10,2) NOT NULL DEFAULT '0', "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "isBilled" boolean NOT NULL DEFAULT false, "invoiceUrl" character varying(512), CONSTRAINT "UQ_e89929747599aa892caed6654a0" UNIQUE ("shortId"), CONSTRAINT "PK_710e2d4957aa5878dfe94e4ac2f" PRIMARY KEY ("id")); COMMENT ON COLUMN "orders"."tenantId" IS 'ID del tenant al que pertenece el pedido'; COMMENT ON COLUMN "orders"."locationId" IS 'ID de la sucursal que procesa el pedido'; COMMENT ON COLUMN "orders"."totalWeightKg" IS 'Peso total del pedido en kg'; COMMENT ON COLUMN "orders"."totalVolumeM3" IS 'Volumen total del pedido en m³'; COMMENT ON COLUMN "orders"."paymentGatewayId" IS 'ID de la transacción en la pasarela de pago'; COMMENT ON COLUMN "orders"."paymentLink" IS 'URL del link de pago generado'; COMMENT ON COLUMN "orders"."preparationTimeMinutes" IS 'Tiempo de preparación en minutos'; COMMENT ON COLUMN "orders"."estimatedDeliveryAt" IS 'Hora de entrega estimada para el cliente'; COMMENT ON COLUMN "orders"."assignedAt" IS 'Hora en que se asignó el repartidor'; COMMENT ON COLUMN "orders"."deliveredAt" IS 'Hora en que el pedido fue realmente entregado'; COMMENT ON COLUMN "orders"."pickupNotificationSent" IS 'Indica si se ha enviado la notificación de proximidad del repartidor al KDS'; COMMENT ON COLUMN "orders"."estimatedPickupArrivalAt" IS 'Hora estimada en que el repartidor llegará a recoger el pedido'; COMMENT ON COLUMN "orders"."isPriority" IS 'Indica si el pedido tiene prioridad de entrega'; COMMENT ON COLUMN "orders"."deliveryProvider" IS 'Indica si la entrega es con repartidor propio o externo'; COMMENT ON COLUMN "orders"."externalDeliveryProvider" IS 'Nombre del proveedor externo (ej. Uber Eats)'; COMMENT ON COLUMN "orders"."deliveryFee" IS 'Costo del envío, si aplica'; COMMENT ON COLUMN "orders"."isBilled" IS 'Indica si la orden ya fue facturada.'; COMMENT ON COLUMN "orders"."invoiceUrl" IS 'URL de la factura generada.'`);
        await queryRunner.query(`CREATE TABLE "locations" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "name" character varying NOT NULL, "address" character varying NOT NULL, "phone" character varying, "isActive" boolean NOT NULL DEFAULT true, "tenantId" uuid NOT NULL, "deliveryArea" geography(Polygon,4326), "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP, CONSTRAINT "PK_7cc1c9e3853b94816c094825e74" PRIMARY KEY ("id")); COMMENT ON COLUMN "locations"."deliveryArea" IS 'Área de entrega en formato GeoJSON Polygon'`);
        await queryRunner.query(`CREATE TYPE "public"."tenant_status_enum" AS ENUM('active', 'trial', 'suspended', 'inactive')`);
        await queryRunner.query(`CREATE TYPE "public"."tenant_plan_enum" AS ENUM('trial', 'basic', 'premium')`);
        await queryRunner.query(`CREATE TABLE "tenant" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "name" character varying NOT NULL, "status" "public"."tenant_status_enum" NOT NULL DEFAULT 'trial', "plan" "public"."tenant_plan_enum", "whatsappApiKey" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "UQ_56211336b5ff35fd944f2259173" UNIQUE ("name"), CONSTRAINT "PK_da8c6efd67bb301e810e56ac139" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TYPE "public"."users_status_enum" AS ENUM('pending_verification', 'active', 'suspended')`);
        await queryRunner.query(`CREATE TABLE "users" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "email" character varying NOT NULL, "password" character varying NOT NULL, "fullName" character varying NOT NULL, "status" "public"."users_status_enum" NOT NULL DEFAULT 'pending_verification', "roleId" uuid NOT NULL, "tenantId" uuid, "locationId" uuid, "maxWeightCapacityKg" numeric(10,2), "maxVolumeCapacityM3" numeric(10,4), "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "UQ_97672ac88f789774dd47f7c8be3" UNIQUE ("email"), CONSTRAINT "PK_a3ffb1c0c8416b9fc6f907b7433" PRIMARY KEY ("id")); COMMENT ON COLUMN "users"."locationId" IS 'ID de la sucursal a la que pertenece el usuario (si aplica)'; COMMENT ON COLUMN "users"."maxWeightCapacityKg" IS 'Capacidad máxima de carga en kg para repartidores'; COMMENT ON COLUMN "users"."maxVolumeCapacityM3" IS 'Capacidad máxima de volumen en m³ para repartidores'`);
        await queryRunner.query(`CREATE TABLE "smtp_setting" ("id" integer NOT NULL DEFAULT '1', "host" character varying NOT NULL, "port" integer NOT NULL, "secure" boolean NOT NULL DEFAULT false, "user" character varying NOT NULL, "pass" character varying, CONSTRAINT "PK_3e6aad3f829189aa21af10e2c58" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "settings" ("key" character varying NOT NULL, "value" text NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_c8639b7626fa94ba8265628f214" PRIMARY KEY ("key"))`);
        await queryRunner.query(`CREATE TABLE "cashier_sessions" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "tenantId" character varying NOT NULL, "openedByUserId" uuid NOT NULL, "closedByUserId" uuid, "openedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "closedAt" TIMESTAMP WITH TIME ZONE, "openingBalance" numeric(10,2) NOT NULL, "closingBalance" numeric(10,2), "totalSales" numeric(10,2), "calculatedCash" numeric(10,2), "calculatedCard" numeric(10,2), "calculatedOther" numeric(10,2), "difference" numeric(10,2), "notes" text, "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_46e6cc581c2e2d21cb1e29e3ba0" PRIMARY KEY ("id")); COMMENT ON COLUMN "cashier_sessions"."openingBalance" IS 'Dinero en caja al abrir'; COMMENT ON COLUMN "cashier_sessions"."closingBalance" IS 'Dinero contado en caja al cerrar'; COMMENT ON COLUMN "cashier_sessions"."totalSales" IS 'Total de ventas durante la sesión'; COMMENT ON COLUMN "cashier_sessions"."calculatedCash" IS 'Ventas calculadas en efectivo'; COMMENT ON COLUMN "cashier_sessions"."calculatedCard" IS 'Ventas calculadas con tarjeta'; COMMENT ON COLUMN "cashier_sessions"."calculatedOther" IS 'Ventas calculadas con otros métodos'; COMMENT ON COLUMN "cashier_sessions"."difference" IS 'Diferencia entre contado y calculado'`);
        await queryRunner.query(`CREATE TABLE "promotions" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "name" character varying NOT NULL, "description" text NOT NULL, "discountPercentage" numeric(5,2), "isActive" boolean NOT NULL DEFAULT true, "imageUrl" character varying, "startDate" TIMESTAMP NOT NULL, "endDate" TIMESTAMP NOT NULL, "tenantId" character varying NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_380cecbbe3ac11f0e5a7c452c34" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TYPE "public"."notifications_type_enum" AS ENUM('low_stock')`);
        await queryRunner.query(`CREATE TABLE "notifications" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "tenantId" character varying NOT NULL, "userId" character varying NOT NULL, "type" "public"."notifications_type_enum" NOT NULL, "message" text NOT NULL, "isRead" boolean NOT NULL DEFAULT false, "relatedEntityId" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_6a72c3c0f683f6462415e653c3a" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "IDX_aed460ae0e5005e0f48b6cb608" ON "notifications" ("tenantId", "userId") `);
        await queryRunner.query(`CREATE TYPE "public"."inventory_movements_type_enum" AS ENUM('purchase', 'sale_deduction', 'waste', 'adjustment')`);
        await queryRunner.query(`CREATE TABLE "inventory_movements" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "tenantId" character varying NOT NULL, "ingredientId" character varying NOT NULL, "userId" character varying, "orderId" character varying, "type" "public"."inventory_movements_type_enum" NOT NULL, "quantityChange" numeric(10,3) NOT NULL, "reason" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_d7597827c1dcffae889db3ab873" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE TABLE "positions" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "name" character varying NOT NULL, "description" text, "tenantId" uuid NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_17e4e62ccd5749b289ae3fae6f3" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "IDX_b6de0fbe12d8399ec0bc098276" ON "positions" ("tenantId") `);
        await queryRunner.query(`CREATE TYPE "public"."employees_paymentfrequency_enum" AS ENUM('daily', 'weekly', 'bi-weekly', 'monthly')`);
        await queryRunner.query(`CREATE TABLE "employees" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "tenantId" uuid NOT NULL, "userId" uuid NOT NULL, "positionId" uuid NOT NULL, "salary" numeric(10,2) NOT NULL, "paymentFrequency" "public"."employees_paymentfrequency_enum" NOT NULL, "hireDate" date NOT NULL, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "UQ_737991e10350d9626f592894cef" UNIQUE ("userId"), CONSTRAINT "REL_737991e10350d9626f592894ce" UNIQUE ("userId"), CONSTRAINT "PK_b9535a98350d5b26e7eb0c26af4" PRIMARY KEY ("id"))`);
        await queryRunner.query(`CREATE INDEX "IDX_ea6a339e5a0792172d53d405b0" ON "employees" ("tenantId") `);
        await queryRunner.query(`CREATE TYPE "public"."overhead_costs_frequency_enum" AS ENUM('one-time', 'daily', 'weekly', 'monthly')`);
        await queryRunner.query(`CREATE TABLE "overhead_costs" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "tenantId" character varying NOT NULL, "locationId" uuid NOT NULL, "name" character varying(255) NOT NULL, "description" text, "amount" numeric(10,2) NOT NULL, "frequency" "public"."overhead_costs_frequency_enum" NOT NULL DEFAULT 'one-time', "costDate" date NOT NULL, "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_924033a4c906f29edb07aaf2e85" PRIMARY KEY ("id")); COMMENT ON COLUMN "overhead_costs"."locationId" IS 'ID de la sucursal a la que pertenece el costo'`);
        await queryRunner.query(`CREATE TYPE "public"."api_keys_serviceidentifier_enum" AS ENUM('INVOICING')`);
        await queryRunner.query(`CREATE TABLE "api_keys" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "tenantId" uuid NOT NULL, "name" character varying(100) NOT NULL, "serviceIdentifier" "public"."api_keys_serviceidentifier_enum" NOT NULL, "apiUrl" character varying(512) NOT NULL, "key" character varying(512) NOT NULL, "isActive" boolean NOT NULL DEFAULT true, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_5c8a79801b44bd27b79228e1dad" PRIMARY KEY ("id")); COMMENT ON COLUMN "api_keys"."key" IS 'API Key encriptada'`);
        await queryRunner.query(`CREATE TABLE "role_permissions" ("role_id" uuid NOT NULL, "permission_id" uuid NOT NULL, CONSTRAINT "PK_25d24010f53bb80b78e412c9656" PRIMARY KEY ("role_id", "permission_id"))`);
        await queryRunner.query(`CREATE INDEX "IDX_178199805b901ccd220ab7740e" ON "role_permissions" ("role_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_17022daf3f885f7d35423e9971" ON "role_permissions" ("permission_id") `);
        await queryRunner.query(`CREATE TABLE "promotions_products_products" ("promotionsId" uuid NOT NULL, "productsId" uuid NOT NULL, CONSTRAINT "PK_b14b21a400555bbdecec84a83ce" PRIMARY KEY ("promotionsId", "productsId"))`);
        await queryRunner.query(`CREATE INDEX "IDX_bf19005cfc0c1c8190af6a473d" ON "promotions_products_products" ("promotionsId") `);
        await queryRunner.query(`CREATE INDEX "IDX_896e5d147379f3840c1f1c55b0" ON "promotions_products_products" ("productsId") `);
        await queryRunner.query(`ALTER TABLE "product_categories" DROP COLUMN "position"`);
        await queryRunner.query(`ALTER TABLE "product_categories" ADD "position" integer NOT NULL DEFAULT '0'`);
        await queryRunner.query(`ALTER TABLE "product_categories" ADD "description" character varying`);
        await queryRunner.query(`ALTER TABLE "licenses" ADD CONSTRAINT "FK_36bf362e91d307965d9a114d64d" FOREIGN KEY ("tenantId") REFERENCES "tenant"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "tenant_configurations" ADD CONSTRAINT "FK_03485c758a380c96574bb380883" FOREIGN KEY ("tenantId") REFERENCES "tenant"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "preparation_zones" ADD CONSTRAINT "FK_fbef96de2204d89c4fe9a1afcfc" FOREIGN KEY ("tenantId") REFERENCES "tenant"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "preparation_zones" ADD CONSTRAINT "FK_b039abf883911e5b074cadcaf6b" FOREIGN KEY ("locationId") REFERENCES "locations"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "recipe_items" ADD CONSTRAINT "FK_b469c2e7e39bd3e4d945bf13b58" FOREIGN KEY ("productId") REFERENCES "products"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "recipe_items" ADD CONSTRAINT "FK_7e1edd294cc3ea5a86baa9a6bfd" FOREIGN KEY ("ingredientId") REFERENCES "ingredients"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "ingredients" ADD CONSTRAINT "FK_23d31ec333c1305523fc420c3bb" FOREIGN KEY ("tenantId") REFERENCES "tenant"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "ingredients" ADD CONSTRAINT "FK_83a42bb8a31fd62c6d855446cae" FOREIGN KEY ("locationId") REFERENCES "locations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "product_ingredients" ADD CONSTRAINT "FK_0c47e7d54540edb8171ebe4e775" FOREIGN KEY ("productId") REFERENCES "products"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "product_ingredients" ADD CONSTRAINT "FK_b40728e717eb031baa2e85371ea" FOREIGN KEY ("ingredientId") REFERENCES "ingredients"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "products" ADD CONSTRAINT "FK_6804855ba1a19523ea57e0769b4" FOREIGN KEY ("tenantId") REFERENCES "tenant"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "products" ADD CONSTRAINT "FK_c71e84c53d54089d521597cb455" FOREIGN KEY ("locationId") REFERENCES "locations"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "products" ADD CONSTRAINT "FK_ff56834e735fa78a15d0cf21926" FOREIGN KEY ("categoryId") REFERENCES "product_categories"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "products" ADD CONSTRAINT "FK_354347d60065530984e81cbb04b" FOREIGN KEY ("preparationZoneId") REFERENCES "preparation_zones"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "order_items" ADD CONSTRAINT "FK_f1d359a55923bb45b057fbdab0d" FOREIGN KEY ("orderId") REFERENCES "orders"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "order_items" ADD CONSTRAINT "FK_cdb99c05982d5191ac8465ac010" FOREIGN KEY ("productId") REFERENCES "products"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "customers" ADD CONSTRAINT "FK_37c1a605468d156e6a8f78f1dc5" FOREIGN KEY ("tenantId") REFERENCES "tenant"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "orders" ADD CONSTRAINT "FK_208a358e9fe8abe6e1d82459804" FOREIGN KEY ("tenantId") REFERENCES "tenant"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "orders" ADD CONSTRAINT "FK_36f52e73f744f8cb770373c898e" FOREIGN KEY ("locationId") REFERENCES "locations"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "orders" ADD CONSTRAINT "FK_e5de51ca888d8b1f5ac25799dd1" FOREIGN KEY ("customerId") REFERENCES "customers"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "orders" ADD CONSTRAINT "FK_855ba25b2ba8e42b130e2f39c29" FOREIGN KEY ("assignedDriverId") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "locations" ADD CONSTRAINT "FK_bb2c7f27ed444aba2e33f76f8f6" FOREIGN KEY ("tenantId") REFERENCES "tenant"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "FK_368e146b785b574f42ae9e53d5e" FOREIGN KEY ("roleId") REFERENCES "roles"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "FK_c58f7e88c286e5e3478960a998b" FOREIGN KEY ("tenantId") REFERENCES "tenant"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "users" ADD CONSTRAINT "FK_49acb911ee20b02f86ec532a122" FOREIGN KEY ("locationId") REFERENCES "locations"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "cashier_sessions" ADD CONSTRAINT "FK_b22e26b2fc48bb130abc63cf6c4" FOREIGN KEY ("openedByUserId") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "cashier_sessions" ADD CONSTRAINT "FK_9ed542889468ba299d1bf8cad92" FOREIGN KEY ("closedByUserId") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "positions" ADD CONSTRAINT "FK_b6de0fbe12d8399ec0bc0982761" FOREIGN KEY ("tenantId") REFERENCES "tenant"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "employees" ADD CONSTRAINT "FK_ea6a339e5a0792172d53d405b00" FOREIGN KEY ("tenantId") REFERENCES "tenant"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "employees" ADD CONSTRAINT "FK_737991e10350d9626f592894cef" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "employees" ADD CONSTRAINT "FK_ce0210d6441acd0e094fba8f20a" FOREIGN KEY ("positionId") REFERENCES "positions"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "overhead_costs" ADD CONSTRAINT "FK_17eeec89c1f200c3f8edf4546fd" FOREIGN KEY ("locationId") REFERENCES "locations"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "api_keys" ADD CONSTRAINT "FK_2cd545077d6e6e8378b051cf1b7" FOREIGN KEY ("tenantId") REFERENCES "tenant"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "role_permissions" ADD CONSTRAINT "FK_178199805b901ccd220ab7740ec" FOREIGN KEY ("role_id") REFERENCES "roles"("id") ON DELETE CASCADE ON UPDATE CASCADE`);
        await queryRunner.query(`ALTER TABLE "role_permissions" ADD CONSTRAINT "FK_17022daf3f885f7d35423e9971e" FOREIGN KEY ("permission_id") REFERENCES "permissions"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "promotions_products_products" ADD CONSTRAINT "FK_bf19005cfc0c1c8190af6a473d3" FOREIGN KEY ("promotionsId") REFERENCES "promotions"("id") ON DELETE CASCADE ON UPDATE CASCADE`);
        await queryRunner.query(`ALTER TABLE "promotions_products_products" ADD CONSTRAINT "FK_896e5d147379f3840c1f1c55b04" FOREIGN KEY ("productsId") REFERENCES "products"("id") ON DELETE CASCADE ON UPDATE CASCADE`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "promotions_products_products" DROP CONSTRAINT "FK_896e5d147379f3840c1f1c55b04"`);
        await queryRunner.query(`ALTER TABLE "promotions_products_products" DROP CONSTRAINT "FK_bf19005cfc0c1c8190af6a473d3"`);
        await queryRunner.query(`ALTER TABLE "role_permissions" DROP CONSTRAINT "FK_17022daf3f885f7d35423e9971e"`);
        await queryRunner.query(`ALTER TABLE "role_permissions" DROP CONSTRAINT "FK_178199805b901ccd220ab7740ec"`);
        await queryRunner.query(`ALTER TABLE "api_keys" DROP CONSTRAINT "FK_2cd545077d6e6e8378b051cf1b7"`);
        await queryRunner.query(`ALTER TABLE "overhead_costs" DROP CONSTRAINT "FK_17eeec89c1f200c3f8edf4546fd"`);
        await queryRunner.query(`ALTER TABLE "employees" DROP CONSTRAINT "FK_ce0210d6441acd0e094fba8f20a"`);
        await queryRunner.query(`ALTER TABLE "employees" DROP CONSTRAINT "FK_737991e10350d9626f592894cef"`);
        await queryRunner.query(`ALTER TABLE "employees" DROP CONSTRAINT "FK_ea6a339e5a0792172d53d405b00"`);
        await queryRunner.query(`ALTER TABLE "positions" DROP CONSTRAINT "FK_b6de0fbe12d8399ec0bc0982761"`);
        await queryRunner.query(`ALTER TABLE "cashier_sessions" DROP CONSTRAINT "FK_9ed542889468ba299d1bf8cad92"`);
        await queryRunner.query(`ALTER TABLE "cashier_sessions" DROP CONSTRAINT "FK_b22e26b2fc48bb130abc63cf6c4"`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "FK_49acb911ee20b02f86ec532a122"`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "FK_c58f7e88c286e5e3478960a998b"`);
        await queryRunner.query(`ALTER TABLE "users" DROP CONSTRAINT "FK_368e146b785b574f42ae9e53d5e"`);
        await queryRunner.query(`ALTER TABLE "locations" DROP CONSTRAINT "FK_bb2c7f27ed444aba2e33f76f8f6"`);
        await queryRunner.query(`ALTER TABLE "orders" DROP CONSTRAINT "FK_855ba25b2ba8e42b130e2f39c29"`);
        await queryRunner.query(`ALTER TABLE "orders" DROP CONSTRAINT "FK_e5de51ca888d8b1f5ac25799dd1"`);
        await queryRunner.query(`ALTER TABLE "orders" DROP CONSTRAINT "FK_36f52e73f744f8cb770373c898e"`);
        await queryRunner.query(`ALTER TABLE "orders" DROP CONSTRAINT "FK_208a358e9fe8abe6e1d82459804"`);
        await queryRunner.query(`ALTER TABLE "customers" DROP CONSTRAINT "FK_37c1a605468d156e6a8f78f1dc5"`);
        await queryRunner.query(`ALTER TABLE "order_items" DROP CONSTRAINT "FK_cdb99c05982d5191ac8465ac010"`);
        await queryRunner.query(`ALTER TABLE "order_items" DROP CONSTRAINT "FK_f1d359a55923bb45b057fbdab0d"`);
        await queryRunner.query(`ALTER TABLE "products" DROP CONSTRAINT "FK_354347d60065530984e81cbb04b"`);
        await queryRunner.query(`ALTER TABLE "products" DROP CONSTRAINT "FK_ff56834e735fa78a15d0cf21926"`);
        await queryRunner.query(`ALTER TABLE "products" DROP CONSTRAINT "FK_c71e84c53d54089d521597cb455"`);
        await queryRunner.query(`ALTER TABLE "products" DROP CONSTRAINT "FK_6804855ba1a19523ea57e0769b4"`);
        await queryRunner.query(`ALTER TABLE "product_ingredients" DROP CONSTRAINT "FK_b40728e717eb031baa2e85371ea"`);
        await queryRunner.query(`ALTER TABLE "product_ingredients" DROP CONSTRAINT "FK_0c47e7d54540edb8171ebe4e775"`);
        await queryRunner.query(`ALTER TABLE "ingredients" DROP CONSTRAINT "FK_83a42bb8a31fd62c6d855446cae"`);
        await queryRunner.query(`ALTER TABLE "ingredients" DROP CONSTRAINT "FK_23d31ec333c1305523fc420c3bb"`);
        await queryRunner.query(`ALTER TABLE "recipe_items" DROP CONSTRAINT "FK_7e1edd294cc3ea5a86baa9a6bfd"`);
        await queryRunner.query(`ALTER TABLE "recipe_items" DROP CONSTRAINT "FK_b469c2e7e39bd3e4d945bf13b58"`);
        await queryRunner.query(`ALTER TABLE "preparation_zones" DROP CONSTRAINT "FK_b039abf883911e5b074cadcaf6b"`);
        await queryRunner.query(`ALTER TABLE "preparation_zones" DROP CONSTRAINT "FK_fbef96de2204d89c4fe9a1afcfc"`);
        await queryRunner.query(`ALTER TABLE "tenant_configurations" DROP CONSTRAINT "FK_03485c758a380c96574bb380883"`);
        await queryRunner.query(`ALTER TABLE "licenses" DROP CONSTRAINT "FK_36bf362e91d307965d9a114d64d"`);
        await queryRunner.query(`ALTER TABLE "product_categories" DROP COLUMN "description"`);
        await queryRunner.query(`ALTER TABLE "product_categories" DROP COLUMN "position"`);
        await queryRunner.query(`ALTER TABLE "product_categories" ADD "position" integer NOT NULL DEFAULT '0'`);
        await queryRunner.query(`DROP INDEX "public"."IDX_896e5d147379f3840c1f1c55b0"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_bf19005cfc0c1c8190af6a473d"`);
        await queryRunner.query(`DROP TABLE "promotions_products_products"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_17022daf3f885f7d35423e9971"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_178199805b901ccd220ab7740e"`);
        await queryRunner.query(`DROP TABLE "role_permissions"`);
        await queryRunner.query(`DROP TABLE "api_keys"`);
        await queryRunner.query(`DROP TYPE "public"."api_keys_serviceidentifier_enum"`);
        await queryRunner.query(`DROP TABLE "overhead_costs"`);
        await queryRunner.query(`DROP TYPE "public"."overhead_costs_frequency_enum"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_ea6a339e5a0792172d53d405b0"`);
        await queryRunner.query(`DROP TABLE "employees"`);
        await queryRunner.query(`DROP TYPE "public"."employees_paymentfrequency_enum"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_b6de0fbe12d8399ec0bc098276"`);
        await queryRunner.query(`DROP TABLE "positions"`);
        await queryRunner.query(`DROP TABLE "inventory_movements"`);
        await queryRunner.query(`DROP TYPE "public"."inventory_movements_type_enum"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_aed460ae0e5005e0f48b6cb608"`);
        await queryRunner.query(`DROP TABLE "notifications"`);
        await queryRunner.query(`DROP TYPE "public"."notifications_type_enum"`);
        await queryRunner.query(`DROP TABLE "promotions"`);
        await queryRunner.query(`DROP TABLE "cashier_sessions"`);
        await queryRunner.query(`DROP TABLE "settings"`);
        await queryRunner.query(`DROP TABLE "smtp_setting"`);
        await queryRunner.query(`DROP TABLE "users"`);
        await queryRunner.query(`DROP TYPE "public"."users_status_enum"`);
        await queryRunner.query(`DROP TABLE "tenant"`);
        await queryRunner.query(`DROP TYPE "public"."tenant_plan_enum"`);
        await queryRunner.query(`DROP TYPE "public"."tenant_status_enum"`);
        await queryRunner.query(`DROP TABLE "locations"`);
        await queryRunner.query(`DROP TABLE "orders"`);
        await queryRunner.query(`DROP TYPE "public"."orders_deliveryprovider_enum"`);
        await queryRunner.query(`DROP TYPE "public"."orders_paymentstatus_enum"`);
        await queryRunner.query(`DROP TYPE "public"."orders_paymentmethod_enum"`);
        await queryRunner.query(`DROP TYPE "public"."orders_ordertype_enum"`);
        await queryRunner.query(`DROP TYPE "public"."orders_status_enum"`);
        await queryRunner.query(`DROP TYPE "public"."orders_channel_enum"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_862ed2c5203e872dcc18da0989"`);
        await queryRunner.query(`DROP TABLE "customers"`);
        await queryRunner.query(`DROP TABLE "order_items"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_4822f9c3a916a1d534d45b95c9"`);
        await queryRunner.query(`DROP TABLE "products"`);
        await queryRunner.query(`DROP TABLE "product_ingredients"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_ef72506f7c6ff6122ca11c51b1"`);
        await queryRunner.query(`DROP TABLE "ingredients"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_582e929f1e678a9ad24eb06846"`);
        await queryRunner.query(`DROP TABLE "recipe_items"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_c3182821195a23e5aa8015e67c"`);
        await queryRunner.query(`DROP TABLE "preparation_zones"`);
        await queryRunner.query(`DROP TABLE "product_categories"`);
        await queryRunner.query(`DROP TABLE "tenant_configurations"`);
        await queryRunner.query(`DROP TABLE "licenses"`);
        await queryRunner.query(`DROP TYPE "public"."licenses_status_enum"`);
        await queryRunner.query(`DROP TABLE "roles"`);
        await queryRunner.query(`DROP TYPE "public"."roles_name_enum"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_c9cd48649b85cbed355d3e113f"`);
        await queryRunner.query(`DROP TABLE "permissions"`);
    }

}
